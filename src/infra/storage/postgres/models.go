// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package postgres

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

type Period string

const (
	PeriodHours   Period = "hours"
	PeriodMinutes Period = "minutes"
	PeriodSeconds Period = "seconds"
	PeriodDays    Period = "days"
	PeriodYears   Period = "years"
)

func (e *Period) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Period(s)
	case string:
		*e = Period(s)
	default:
		return fmt.Errorf("unsupported scan type for Period: %T", src)
	}
	return nil
}

type NullPeriod struct {
	Period Period
	Valid  bool // Valid is true if Period is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPeriod) Scan(value interface{}) error {
	if value == nil {
		ns.Period, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Period.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPeriod) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Period), nil
}

type RequestMethods string

const (
	RequestMethodsGET    RequestMethods = "GET"
	RequestMethodsPOST   RequestMethods = "POST"
	RequestMethodsPUT    RequestMethods = "PUT"
	RequestMethodsDELETE RequestMethods = "DELETE"
)

func (e *RequestMethods) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RequestMethods(s)
	case string:
		*e = RequestMethods(s)
	default:
		return fmt.Errorf("unsupported scan type for RequestMethods: %T", src)
	}
	return nil
}

type NullRequestMethods struct {
	RequestMethods RequestMethods
	Valid          bool // Valid is true if RequestMethods is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRequestMethods) Scan(value interface{}) error {
	if value == nil {
		ns.RequestMethods, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RequestMethods.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRequestMethods) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RequestMethods), nil
}

type Client struct {
	ID              uuid.UUID
	ClientName      string
	ScopeID         uuid.UUID
	Permissions     pgtype.JSONB
	ApiID           string
	Salt            string
	KeyTimeDuration pgtype.Numeric
	KeyPeriod       Period
	ClientCreatedAt time.Time
	ClientUpdatedAt time.Time
	ClientDeletedAt sql.NullTime
}

type Resource struct {
	ID                uuid.UUID
	ResourceName      string
	ResourcePath      string
	ResourceMethod    RequestMethods
	ResourceCreatedAt time.Time
	ResourceUpdatedAt time.Time
}

type Scope struct {
	ID             uuid.UUID
	ScopeName      string
	ScopeCreatedAt time.Time
	ScopeUpdatedAt time.Time
}

type ScopeResource struct {
	ID         uuid.UUID
	ScopeID    uuid.UUID
	ResourceID uuid.UUID
}
