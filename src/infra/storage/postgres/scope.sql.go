// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: scope.sql

package postgres

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createScope = `-- name: CreateScope :exec
insert into scope (
    "id",
    "scope_name",
    "scope_created_at",
    "scope_updated_at"
) values ($1, $2, $3, $4)
`

type CreateScopeParams struct {
	ID             uuid.UUID
	ScopeName      string
	ScopeCreatedAt time.Time
	ScopeUpdatedAt time.Time
}

func (q *Queries) CreateScope(ctx context.Context, arg CreateScopeParams) error {
	_, err := q.db.Exec(ctx, createScope,
		arg.ID,
		arg.ScopeName,
		arg.ScopeCreatedAt,
		arg.ScopeUpdatedAt,
	)
	return err
}

const delScopeById = `-- name: DelScopeById :exec
delete from scope
where 
    id = $1
`

func (q *Queries) DelScopeById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, delScopeById, id)
	return err
}

const getScopeById = `-- name: GetScopeById :one
select id, scope_name, scope_created_at, scope_updated_at from scope
where 
    id = $1
`

func (q *Queries) GetScopeById(ctx context.Context, id uuid.UUID) (Scope, error) {
	row := q.db.QueryRow(ctx, getScopeById, id)
	var i Scope
	err := row.Scan(
		&i.ID,
		&i.ScopeName,
		&i.ScopeCreatedAt,
		&i.ScopeUpdatedAt,
	)
	return i, err
}

const getScopeByName = `-- name: GetScopeByName :one
select id, scope_name, scope_created_at, scope_updated_at from scope
where 
    scope_name = $1
`

func (q *Queries) GetScopeByName(ctx context.Context, scopeName string) (Scope, error) {
	row := q.db.QueryRow(ctx, getScopeByName, scopeName)
	var i Scope
	err := row.Scan(
		&i.ID,
		&i.ScopeName,
		&i.ScopeCreatedAt,
		&i.ScopeUpdatedAt,
	)
	return i, err
}
